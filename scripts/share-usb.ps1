# NOTICE - DO NOT EDIT this file in this folder. Copy this to a local .DEV folder and edit there.

# # Before running these commands, you must have the USBIPD-WIN project installed on Windows.
# # Follow the instructions at https://learn.microsoft.com/en-us/windows/wsl/connect-usb

# # This script allows you to share usb devices to WSL and back to Windows.
param (
    [switch]$admin
)

# Function to check if the script is running with administrative privileges
function Test-Admin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

# Function to wait before exiting if the script was elevated
function Wait-On-Exit {
    if ($admin) {
        Write-Host "Press Enter to close this window..." -ForegroundColor Cyan
        Read-Host
    }
    exit
}

# Elevate privileges if not running as admin and `-admin` is not specified
if (-not $admin -and -not (Test-Admin)) {
    Write-Host "This script requires administrator privileges to bind USB devices." -ForegroundColor Yellow
    Write-Host "Re-running the script with elevated privileges..." -ForegroundColor Cyan

    # Re-run the script as admin
    Start-Process -FilePath "powershell" -ArgumentList "-NoProfile", "-ExecutionPolicy Bypass", "-File `"$PSCommandPath`" -admin" -Verb RunAs
    exit
}

# Main script starts here
Write-Host "Retrieving USB devices..." -ForegroundColor Cyan
$usbDevices = usbipd list

if (-not $usbDevices) {
    Write-Host "No USB devices found. Ensure your USBIPD service is running and devices are connected." -ForegroundColor Red
    Wait-On-Exit
}

# Parse the `usbipd list` output using regex
$deviceList = @()
$usbDevices -split "`n" | ForEach-Object {
    if ($_ -match "^(?<BUSID>\S+)\s+(?<VIDPID>\S+)\s+(?<Device>.+?)\s+(?<State>Shared|Not shared|Attached)$") {
        $deviceList += [PSCustomObject]@{
            BUSID   = $matches['BUSID']
            VIDPID  = $matches['VIDPID']
            Device  = $matches['Device']
            State   = $matches['State']
        }
    }
}

if (-not $deviceList) {
    Write-Host "No USB devices were found. Ensure devices are connected and try again." -ForegroundColor Red
    Wait-On-Exit
}

# Filter for devices that are not shared
$notSharedDevices = $deviceList | Where-Object { $_.State -eq "Not shared" }

if (-not $notSharedDevices) {
    Write-Host "All devices are either shared or attached. No devices are available to bind." -ForegroundColor Yellow
    Wait-On-Exit
}

# Display the list of not shared devices for selection
Write-Host "Select a device from the list in the graphical window to bind..."
$selectedDevice = $notSharedDevices | Out-GridView -Title "Select a USB Device to Bind to WSL" -PassThru

if (-not $selectedDevice) {
    Write-Host "No device selected. Exiting." -ForegroundColor Yellow
    Wait-On-Exit
}

# Bind the selected BUSID
$selectedBusID = $selectedDevice.BUSID
usbipd bind --busid $selectedBusID
if ($LASTEXITCODE -eq 0) {
    Write-Host "Device with BUSID $selectedBusID successfully bound for WSL." -ForegroundColor Green
    Write-Host "You can now attach this device using the attach-usb.ps1 script." -ForegroundColor Green
} else {
    Write-Host "Failed to bind device with BUSID $selectedBusID. Ensure you are running this script as an administrator." -ForegroundColor Red
}

# Wait before exiting if elevated
Wait-On-Exit

